name: Archive Slack Messages

on:
  workflow_dispatch:
    inputs:
      from_date:
        description: 'Start date (YYYY-MM-DD, optional)'
        required: false
        default: ''
        type: string
      to_date:
        description: 'End date (YYYY-MM-DD, optional)'
        required: false
        default: ''
        type: string

jobs:
  archive-slack:
    name: Archive Slack Messages
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore and build
      run: |
        dotnet restore
        dotnet build --configuration Release
        
    - name: Check required secrets
      run: |
        echo "üîç Checking required secrets..."
        if [ -z "${{ secrets.SLACK_BOT_TOKEN }}" ]; then
          echo "‚ùå SLACK_BOT_TOKEN secret is not set"
          echo "Please add your Slack bot token to repository secrets"
          exit 1
        fi
        if [ -z "${{ secrets.SLACK_CHANNELS }}" ]; then
          echo "‚ùå SLACK_CHANNELS secret is not set"
          echo "Please add your channel configuration to repository secrets"
          exit 1
        fi
        if [ -z "${{ secrets.ARCHIVE_PASSWORD }}" ]; then
          echo "‚ùå ARCHIVE_PASSWORD secret is not set"
          echo "Please add your archive password to repository secrets"
          exit 1
        fi
        echo "‚úÖ All required secrets are configured"
        
    - name: Setup configuration
      run: |
        echo "üîß Creating configuration file..."
        cat > appsettings.json << 'EOF'
        {
          "Slack": {
            "Token": "${{ secrets.SLACK_BOT_TOKEN }}",
            "Channels": ${{ secrets.SLACK_CHANNELS }}
          },
          "Archive": {
            "OutputPath": "./slack-archive"
          },
          "Logging": {
            "LogLevel": {
              "Default": "Information",
              "Microsoft": "Warning",
              "Microsoft.Hosting.Lifetime": "Information"
            }
          }
        }
        EOF
        echo "‚úÖ Configuration file created"
        
    - name: Run Slack Channel Reader
      run: |
        args=""
        if [ -n "${{ inputs.from_date }}" ]; then
          args="${{ inputs.from_date }}"
          echo "üìÖ From date: ${{ inputs.from_date }}"
        fi
        if [ -n "${{ inputs.to_date }}" ]; then
          args="$args ${{ inputs.to_date }}"
          echo "üìÖ To date: ${{ inputs.to_date }}"
        fi
        
        if [ -z "$args" ]; then
          echo "üìÖ No dates specified - archiving last 30 days"
        fi
        
        echo "üöÄ Starting Slack archive with args: [$args]"
        echo "Command: dotnet run --configuration Release -- $args"
        
        # Run with proper argument handling
        if [ -z "$args" ]; then
          dotnet run --configuration Release
        else
          dotnet run --configuration Release -- $args
        fi
        
        echo "‚úÖ Slack archive command completed"
        
    - name: Show archive summary
      run: |
        echo "üìä Archive Summary:"
        if [ -d "slack-archive" ]; then
          find slack-archive -name "*.jsonl" | while read file; do
            lines=$(wc -l < "$file")
            size=$(du -h "$file" | cut -f1)
            echo "  üìÅ $(basename "$file"): $lines messages ($size)"
          done
          
          total_messages=$(find slack-archive -name "*.jsonl" -exec wc -l {} + | tail -1 | awk '{print $1}' 2>/dev/null || echo "0")
          file_count=$(find slack-archive -name "*.jsonl" | wc -l)
          
          echo ""
          echo "‚úÖ Total: $total_messages messages in $file_count files"
        else
          echo "‚ùå No archive files were created"
        fi
        
    - name: Create password-protected archive
      run: |
        echo "üîß Preparing archive creation..."
        
        # Install zip with password support
        sudo apt-get update && sudo apt-get install -y zip
        
        # Check if slack-archive directory exists
        if [ ! -d "slack-archive" ]; then
          echo "‚ùå No slack-archive directory found"
          echo "This usually means:"
          echo "  - No messages were found in the specified date range"
          echo "  - Slack API authentication failed"
          echo "  - Network connectivity issues"
          echo ""
          echo "Creating empty archive with error message..."
          mkdir -p slack-archive
          echo "No messages were archived. Check your configuration and date range." > slack-archive/README.txt
        fi
        
        # Check if any files were created
        file_count=$(find slack-archive -name "*.jsonl" | wc -l)
        if [ "$file_count" -eq 0 ]; then
          echo "‚ö†Ô∏è  No JSONL files found in slack-archive directory"
          echo "Archive will contain explanation instead of messages"
          echo ""
          echo "Possible causes:" > slack-archive/NO_MESSAGES_FOUND.txt
          echo "- No messages in the specified date range" >> slack-archive/NO_MESSAGES_FOUND.txt
          echo "- Invalid channel IDs in SLACK_CHANNELS secret" >> slack-archive/NO_MESSAGES_FOUND.txt
          echo "- Slack bot doesn't have access to the channels" >> slack-archive/NO_MESSAGES_FOUND.txt
          echo "- API rate limiting or network issues" >> slack-archive/NO_MESSAGES_FOUND.txt
        else
          echo "‚úÖ Found $file_count JSONL file(s) to archive"
        fi
        
        # Create password-protected ZIP using a secret
        # Password comes from GitHub secret - only you know it
        cd slack-archive
        zip -r -P "${{ secrets.ARCHIVE_PASSWORD }}" ../slack-messages-protected.zip .
        cd ..
        
        echo "üîê Archive created with password protection"
        echo "üìÅ Use your ARCHIVE_PASSWORD secret to extract the files"
        echo "‚ö†Ô∏è  Password is NOT visible in logs for security"
        
    - name: Upload password-protected Slack archive
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: slack-messages-protected-${{ github.run_number }}
        path: slack-messages-protected.zip
        retention-days: 90
        if-no-files-found: error
        
    - name: Create download instructions
      run: |
        cat > download-instructions.md << 'EOF'
        # üîê Your Password-Protected Slack Messages Are Ready!
        
        ## üîë IMPORTANT: Password Required
        **Archive Password:** Your `ARCHIVE_PASSWORD` GitHub secret
        
        ‚ö†Ô∏è **Use the same password you set in your repository secrets!**
        
        ## üìä Archive Summary
        - Generated on: $(date)
        - Run number: ${{ github.run_number }}
        - Protection: Password-protected ZIP archive
        
        ## üìÅ Files in this archive:
        $(find slack-archive -name "*.jsonl" 2>/dev/null | while read file; do
            lines=$(wc -l < "$file" 2>/dev/null || echo "0")
            echo "- **$(basename "$file")**: $lines messages"
        done || echo "- Files will be listed after extraction")
        
        ## üì• How to Extract Your Messages:
        
        ### Step 1: Download
        1. Download the `slack-messages-protected-${{ github.run_number }}` artifact
        2. You'll get a file called `slack-messages-protected.zip`
        
        ### Step 2: Extract with Password
        **Windows:**
        - Right-click ‚Üí Extract All
        - Enter your ARCHIVE_PASSWORD secret
        
        **Mac:**
        - Double-click the ZIP file  
        - Enter your ARCHIVE_PASSWORD secret
        
        **Linux/Command Line:**
        ```bash
        unzip -P "your-archive-password" slack-messages-protected.zip
        ```
        
        ## üîç How to View Your Messages:
        
        ### Option 1: Web Viewer (Recommended)
        1. Extract the password-protected archive (see above)
        2. Open `viewer.html` from your repository in a web browser
        3. Drag and drop any `.jsonl` file to view messages with a nice interface
        
        ### Option 2: Command Line Analysis
        ```bash
        # View raw JSONL data
        cat channel-name/2024-01.jsonl | jq .
        
        # Count messages
        wc -l channel-name/2024-01.jsonl
        
        # Search for specific text
        grep -i "keyword" channel-name/2024-01.jsonl
        ```
        
        ### Option 3: Import into Tools
        - **Excel/Google Sheets**: Import as JSON/CSV
        - **Python**: `pd.read_json('file.jsonl', lines=True)`
        - **Data Analysis**: Process with jq, pandas, or other tools
        
        ## üìã File Format
        Each line is a JSON object with message data:
        - `text`: Message content
        - `user_display_name`: Who sent it  
        - `ts_iso`: When it was sent (ISO format)
        - `channel_name`: Which channel
        - `is_root`: True if root message, false if reply
        - `thread_id`: Thread identifier for grouping
        - `mentions`: Array of mentioned users
        
        ## üõ°Ô∏è Security Notes
        - Archive is password-protected for security
        - Only you know the password (from this workflow run)
        - Safe to download even from public repositories
        - Password is your ARCHIVE_PASSWORD secret (not visible in logs)
        EOF
        
    - name: Upload instructions
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: download-instructions-${{ github.run_number }}
        path: download-instructions.md
        retention-days: 90