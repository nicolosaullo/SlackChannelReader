name: Manual Build and Release

on:
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a GitHub release'
        required: false
        default: false
        type: boolean
      release_version:
        description: 'Release version (e.g., v1.0.0)'
        required: false
        default: ''
        type: string
      run_slack_reader:
        description: 'Run Slack Channel Reader and upload results'
        required: false
        default: false
        type: boolean
      from_date:
        description: 'Start date (YYYY-MM-DD, optional)'
        required: false
        default: ''
        type: string
      to_date:
        description: 'End date (YYYY-MM-DD, optional)'
        required: false
        default: ''
        type: string

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build application
      run: dotnet build --no-restore --configuration Release
      
    - name: Run tests
      run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage"
      continue-on-error: true
      
    - name: Upload coverage reports
      if: always()
      uses: codecov/codecov-action@v3
      with:
        files: '**/coverage.cobertura.xml'
        fail_ci_if_error: false

  run-slack-reader:
    name: Run Slack Channel Reader
    runs-on: ubuntu-latest
    needs: build-and-test
    if: inputs.run_slack_reader
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build application
      run: dotnet build --no-restore --configuration Release
      
    - name: Setup configuration
      run: |
        # Create appsettings.json from secrets
        cat > appsettings.json << 'EOF'
        {
          "Slack": {
            "Token": "${{ secrets.SLACK_BOT_TOKEN }}",
            "Channels": ${{ secrets.SLACK_CHANNELS }}
          },
          "Archive": {
            "OutputPath": "./slack-archive"
          },
          "Logging": {
            "LogLevel": {
              "Default": "Information",
              "Microsoft": "Warning",
              "Microsoft.Hosting.Lifetime": "Information"
            }
          }
        }
        EOF
        
    - name: Run Slack Channel Reader
      run: |
        args=""
        if [ -n "${{ inputs.from_date }}" ]; then
          args="${{ inputs.from_date }}"
        fi
        if [ -n "${{ inputs.to_date }}" ]; then
          args="$args ${{ inputs.to_date }}"
        fi
        
        echo "Running with arguments: $args"
        dotnet run --configuration Release -- $args
        
    - name: Upload Slack archive
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: slack-archive-${{ github.run_number }}
        path: slack-archive/
        retention-days: 30
        
    - name: Create archive summary
      run: |
        echo "# 📊 Slack Archive Summary" > archive-summary.md
        echo "" >> archive-summary.md
        echo "Generated on: $(date)" >> archive-summary.md
        echo "Run ID: ${{ github.run_number }}" >> archive-summary.md
        echo "" >> archive-summary.md
        
        if [ -d "slack-archive" ]; then
          echo "## 📁 Files Created" >> archive-summary.md
          echo "" >> archive-summary.md
          find slack-archive -name "*.jsonl" | while read file; do
            lines=$(wc -l < "$file")
            echo "- **$(basename "$file")**: $lines messages" >> archive-summary.md
          done
          
          total_messages=$(find slack-archive -name "*.jsonl" -exec wc -l {} + | tail -1 | awk '{print $1}')
          file_count=$(find slack-archive -name "*.jsonl" | wc -l)
          
          echo "" >> archive-summary.md
          echo "## 📈 Statistics" >> archive-summary.md
          echo "- **Total Messages**: $total_messages" >> archive-summary.md
          echo "- **Files Created**: $file_count" >> archive-summary.md
          
          echo "" >> archive-summary.md
          echo "## 🔍 How to View" >> archive-summary.md
          echo "1. Download the \`slack-archive-${{ github.run_number }}\` artifact" >> archive-summary.md
          echo "2. Extract the files locally" >> archive-summary.md
          echo "3. Use the \`viewer.html\` file to browse messages" >> archive-summary.md
        else
          echo "No archive files were created." >> archive-summary.md
        fi
        
    - name: Upload summary
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: archive-summary-${{ github.run_number }}
        path: archive-summary.md
        retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Run security audit
      run: dotnet list package --vulnerable --include-transitive
      continue-on-error: true

  build-release:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    
    strategy:
      matrix:
        runtime: [win-x64, linux-x64, osx-x64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Publish application
      run: |
        dotnet publish \
          --configuration Release \
          --runtime ${{ matrix.runtime }} \
          --self-contained true \
          --output ./publish/${{ matrix.runtime }} \
          -p:PublishSingleFile=true \
          -p:PublishTrimmed=true \
          -p:TrimMode=partial
          
    - name: Create archive
      run: |
        cd ./publish/${{ matrix.runtime }}
        if [[ "${{ matrix.runtime }}" == win-* ]]; then
          zip -r ../../SlackChannelReader-${{ matrix.runtime }}.zip .
        else
          tar -czf ../../SlackChannelReader-${{ matrix.runtime }}.tar.gz .
        fi
      
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: SlackChannelReader-${{ matrix.runtime }}
        path: |
          SlackChannelReader-${{ matrix.runtime }}.zip
          SlackChannelReader-${{ matrix.runtime }}.tar.gz
        retention-days: 30

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build-release
    if: inputs.create_release && inputs.release_version != ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v5
      with:
        path: ./artifacts
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ inputs.release_version }}
        name: Release ${{ inputs.release_version }}
        files: ./artifacts/**/*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}